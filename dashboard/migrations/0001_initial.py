# Generated by Django 5.2.1 on 2025-05-18 14:12

import dashboard.models
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, verbose_name='username')),
                ('email', models.EmailField(max_length=254, unique=True, verbose_name='email address')),
                ('mobile_number', models.CharField(blank=True, max_length=15, verbose_name='mobile number')),
                ('status', models.CharField(choices=[('active', 'Active'), ('inactive', 'Inactive')], default='active', help_text='User account status', max_length=10, verbose_name='status')),
                ('date_joined', models.DateTimeField(auto_now_add=True, verbose_name='date joined')),
                ('last_login', models.DateTimeField(auto_now=True, verbose_name='last login')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'ordering': ['-date_joined'],
                'permissions': [('can_view_data_entry', 'Can view data entry page'), ('can_view_data_edit', 'Can view data edit page'), ('can_view_enquiry', 'Can view enquiry page'), ('can_view_branch_dep_link', 'Can view branch department link page'), ('can_view_bulk_upload', 'Can view bulk upload page'), ('can_view_department', 'Can view department page'), ('can_view_division_branch', 'Can view division branch page'), ('can_view_logo_upload', 'Can view logo upload page'), ('can_view_sub_department', 'Can view sub department page'), ('can_view_create_user', 'Can view create user page'), ('can_view_password_change', 'Can view password change page'), ('can_view_user_list', 'Can view user list page'), ('can_view_user_rights', 'Can view user rights page'), ('can_view_log_report', 'Can view log report page'), ('can_view_register', 'Can view register page')],
            },
            managers=[
                ('objects', dashboard.models.UserManager()),
            ],
        ),
    ]
